const AWS = require('aws-sdk');
const fs = require('fs');

// AWS 설정
AWS.config.update({
  accessKeyId: '#',
  secretAccessKey: '#',
  region: 'ap-southeast-2'
});

// S3객체 생성
const s3 = new AWS.S3();

// Rekognition 객체 생성
const rekognition = new AWS.Rekognition();

// S3에 이미지 업로드 함수
function uploadImageToS3() {
  const filePath = 'C:\\Users\\danie\\Desktop\\rekognition2.jpeg'; // 업로드할 이미지 파일 경로
  const bucketName = 'testbucketno1'; // S3 버킷 이름

  // 파일 읽기
  const fileStream = fs.createReadStream(filePath);

  // S3에 업로드할 객체 설정
  const uploadParams = {
    Bucket: bucketName,
    Key: 'rekognition2.jpg', // S3에 저장될 파일 이름
    Body: fileStream
  };

  // S3에 이미지 업로드
  s3.upload(uploadParams, function(err, data) {
    if (err) {
      console.error('Error uploading image to S3:', err);
    } else {
      console.log('Image uploaded to S3:', data.Location);

      // 이미지 업로드가 완료되면 객체 감지 수행
      detectObjectsInImage(data.Location);
    }
  });
}

// 객체 감지 함수
function detectObjectsInImage(imageUrl) {
  // Rekognition의 DetectLabels 요청 설정
  const params = {
    Image: {
      S3Object: {
        Bucket: 'testbucketno1', // S3 버킷 이름
        Name: 'rekognition2.jpg' // 이미지 파일 이름
      }
    },
    MaxLabels: 10 // 반환할 최대 레이블 수
  };

  // 객체 감지 요청
  rekognition.detectLabels(params, function(err, data) {
    if (err) {
      console.error('Error detecting labels:', err);
    } else {
      console.log('Detected labels:', data.Labels);

      // 전방에 위치한 사람만 표시하는 기능 추가
      const people = data.Labels.filter(label => label.Name === 'Person');
      const frontFacingPeople = people.filter(person => {
        const orientation = person.Instances[0].Pose.Roll;
        return Math.abs(orientation) <= 45;
      });

      // 인식된 사람에 대해 네모 박스로 표시
      drawBoundingBoxesOnImage(imageUrl, frontFacingPeople);
    }
  });
}

// 네모 박스 그리기 함수
function drawBoundingBoxesOnImage(imageUrl, people) {
  // 이미지를 다운로드 받아 로컬에 저장
  const downloadParams = {
    Bucket: 'testbucketno1', // S3 버킷 이름
    Key: 'rekognition2.jpg' // 이미지 파일 이름
  };

  const imageFile = fs.createWriteStream('localImage.jpg'); // 다운로드 받은 이미지를 로컬에 저장할 파일 이름
  s3.getObject(downloadParams)
    .createReadStream()
    .pipe(imageFile)
    .on('close', function() {
      console.log('Image downloaded and saved locally.');

      // 이미지에 네모 박스 그리기
      const Jimp = require('jimp');

      Jimp.read('localImage.jpg', function(err, image) {
        if (err) {
          console.error('Error reading image:', err);
        } else {
          const boxColor = 0xFF0000; // 네모 박스 색상 (빨간색)
          const boxThickness = 2; // 네모 박스 두께

          // 인식된 사람에 대해 네모 박스 그리기
          for (const person of people) {
            const box = person.Instances[0].BoundingBox;
            const width = image.bitmap.width;
            const height = image.bitmap.height;
            const x = box.Left * width;
            const y = box.Top * height;
            const boxWidth = box.Width * width;
            const boxHeight = box.Height * height;

            image
              .boundingBox(x, y, boxWidth, boxHeight, boxThickness, boxColor);
          }

          // 그려진 이미지를 새 파일로 저장
          image.write('markedImage.jpg', function(err) {
            if (err) {
              console.error('Error saving marked image:', err);
            } else {
              console.log('Image with bounding boxes saved as markedImage.jpg');
            }
          });
        }
      });
    });
}

// 이미지 업로드 및 객체 감지 시작
uploadImageToS3();

